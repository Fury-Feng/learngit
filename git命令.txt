GIT命令指南


git init 											                创建版本库

git log --graph --pretty=oneline --abbrev-commit  					查看分支合并情况

git switch -c 分支名    =    git checkout -b <分支名>    			新建分支并转换到分支

git add 文件      													把文件添加到仓库

git commit -m "<commet>"     										把文件提交到仓库  

git status  														查看提交状态结果

git diff   															查看修改内容

git log （--pretty=oneline）										查看提交记录（括号里可以省略多余信息）

HEAD																表示当前版本
HEAD^																表示上个版本
HEAD^^																表示上上个版本
HEAD~100															表示往上一百个版本

git reset --hard HEAD^											    回退到上一个版本

git reset --hard <版本号>											回到版本号为...的版本

git reflog															查看每一个命令

git diff HEAD -- <file>												查看工作区和版本库里面最新版本的区别

git checkout -- <file>												丢弃工作区的修改    一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态
																						一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态
																						
git reset HEAD <file>												把暂存区的修改撤销掉（unstage），重新放回工作区

git rm <file>														从版本库中删除文件， 记得要commit 

git checkout -- <file>												把误删的文件恢复最新版本 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

ssh-keygen -t rsa -C "youremail@example.com"						在用户主目录下创建ssh key

git remote add origin git@github.com:Fury-Feng/<仓库名>.git			在本地仓库下运行命令  将本地仓库与远程仓库关联

git push -u origin master											把本地仓库master分支（主线）上的所有内容推送到远程仓库

git push origin master												之后做了修改可以用此命令提交

git clone git@github.com:Fury-Feng/<仓库名>.git						从远程库克隆到本地库

git branch															查看当前分支

git checkout/switch <分支名>										转换至分支

git merge <分支名>													把分支的工作成果合并到master分支上

git branch -d <分支名>												删除分支

git merge --no-ff -m "merge with no-ff" <分支名>					禁用Fast forward来合并分支   --no-ff表示禁用 Fast forward

git stash															可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

git stash list														查找刚才的工作现场存到哪去了

git stash apply														恢复工作现场，但是恢复后，stash内容并不删除，你需要用git stash drop来删除

git stash pop														恢复的同时把stash内容也删了

git stash apply stash@{0}											恢复指定的stash

git cherry-pick <commit>											在master分支上修复的bug，想要合并到当前dev分支，把bug提交的修改“复制”到当前分支，避免重复劳动。

git branch -D <分支名>												强行删除分支

git remote															查看远程库信息

git remote -v														查看远程库详细信息

git push origin <分支名>											把分支推送到远程库对应分支上

git switch -c <分支名> origin/<分支名>								创建远程origin的分支到本地

git pull															你的小伙伴的最新提交和你试图推送的提交有冲突，先用git pull把最新的提交抓下来，然后，在本地合并，解决冲突，再推送

git branch --set-upstream-to=origin/<分支名> <分支名>				指定本地分支与远程分支的链接			

git tag <标签名>													给最新commit命名标签

git tag <标签名> <commit>											给对应的commit打标签

git tag																查看标签

git tag -a <标签名> -m "<说明>" <commit>							创建带有说明的标签，用-a指定标签名，-m指定说明文字

git show <标签名>													可以看到说明文字

git tag -d <标签名>													删除标签

git push origin <标签名>											推送标签到远程库

git push origin --tags												一次性推送全部尚未推送到远程的本地标签

git push origin :refs/tags/<标签名>									从远程库删除标签  但要现在本地删除标签

git config --global alias.<缩写> <git命令>							将git命令改成缩写 很省事

配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中  配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置
